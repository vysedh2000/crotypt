"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ecs_helpers_1 = require("@elastic/ecs-helpers");
var logger_1 = __importDefault(require("./logger"));
var universal_user_agent_1 = require("universal-user-agent");
var node_fetch_1 = __importDefault(require("node-fetch"));
var Optic = /** @class */ (function () {
    function Optic(options) {
        this.config = {};
        this.config.enabled = options.enabled || false;
        this.config.uploadUrl = options.uploadUrl || (process.env.OPTIC_LOGGING_URL ? process.env.OPTIC_LOGGING_URL + 'ecs' : '');
        this.config.console = options.console || Boolean(process.env.OPTIC_CONSOLE) || false;
        this.config.log = options.log || Boolean(process.env.OPTIC_LOG) || false;
        this.userAgent = this.buildUserAgent(options.framework);
    }
    Optic.prototype.buildUserAgent = function (framework) {
        return universal_user_agent_1.getUserAgent() + ((framework) ? ' ' + framework : '');
    };
    // @TODO use tag for user agent
    Optic.formatObject = function (req, res, hydrate) {
        var httpObj = {
            http: {
                response: {},
                request: {}
            },
            optic: {}
        };
        if (hydrate && hydrate.request) {
            httpObj.http.request = {
                body: { content: hydrate.request(req) }
            };
        }
        if (hydrate && hydrate.response) {
            httpObj.http.response = {
                body: { content: hydrate.response(res) }
            };
        }
        ecs_helpers_1.formatHttpRequest(httpObj, req);
        ecs_helpers_1.formatHttpResponse(httpObj, res);
        return httpObj;
    };
    Optic.prototype.sendToConsole = function (obj) {
        if (this.config.console) {
            logger_1.default.log('Optic logging to terminal');
            console.log(JSON.stringify(obj));
        }
    };
    Optic.prototype.sendToUrl = function (obj) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                logger_1.default.log('Optic logging to @useoptic/cli');
                try {
                    logger_1.default.log("Uploading to " + this.config.uploadUrl);
                    node_fetch_1.default(String(this.config.uploadUrl), {
                        method: 'post',
                        body: JSON.stringify([obj]),
                        headers: { 'Content-Type': 'application/json' }
                    });
                }
                catch (error) {
                    logger_1.default.error(error);
                }
                return [2 /*return*/];
            });
        });
    };
    Optic.prototype.captureHttpRequest = function (req, res, hydrate) {
        if (this.config.enabled) {
            logger_1.default.log('Optic logging request');
            var httpObj = Optic.formatObject(req, res, hydrate);
            // Add optic information
            // httpObj.optic = {
            //   agent: this.userAgent
            // }
            if (this.config.console)
                this.sendToConsole(httpObj);
            if (this.config.uploadUrl)
                this.sendToUrl(httpObj);
        }
    };
    return Optic;
}());
exports.default = Optic;
